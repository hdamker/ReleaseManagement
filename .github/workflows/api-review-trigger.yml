# .github/workflows/api-review-trigger.yml
# 
# CAMARA API Review Trigger Workflow (Version-Specific)
# 
# Purpose: Entry point for automated CAMARA API compliance reviews. Can be triggered by:
#   - Issue comments starting with "/rc-api-review" (extracts PR URL from issue description)
#   - Manual workflow dispatch with custom parameters
# 
# Updates:
#   - Validates Commonalities version support (currently only 0.6)
#   - Uses version-specific validator scripts
#   - Enhanced error handling for unsupported versions
# 
# This workflow validates inputs and calls the reusable review workflow.
# 
# Usage Guide: /documentation/SupportingDocuments/CAMARA_API_Review_Workflow_Usage_Guide.md
# Place this file in: ReleaseManagement repository .github/workflows/ directory

name: 'CAMARA API Review Trigger'

on:
  workflow_dispatch:
    inputs:
      pull_request_url:
        description: 'Full URL of the pull request to review (e.g., https://github.com/camaraproject/QualityOnDemand/pull/123)'
        required: true
        type: string
      issue_number:
        description: 'Issue number in ReleaseManagement repo to post results to'
        required: true
        type: string
      review_type:
        description: 'Type of review to perform'
        required: true
        default: 'release-candidate'
        type: choice
        options:
          - 'release-candidate'
          - 'alpha'
          - 'public-release'
      commonalities_version:
        description: 'CAMARA Commonalities version (currently only 0.6 is supported)'
        required: false
        default: '0.6'
        type: choice
        options:
          - '0.6'
          - '0.7'
          - '0.8'
          - '1.0'
  issue_comment:
    types: [created]

jobs:
  check-comment-trigger:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      pull_request_url: ${{ steps.extract.outputs.pull_request_url }}
      issue_number: ${{ steps.extract.outputs.issue_number }}
      review_type: ${{ steps.extract.outputs.review_type }}
      commonalities_version: ${{ steps.extract.outputs.commonalities_version }}
    steps:
      - name: Check Comment Trigger
        id: check
        run: |
          if [[ "${{ github.event_name }}" != "issue_comment" ]]; then
            echo "‚ÑπÔ∏è Not an issue comment event, skipping comment processing"
            echo "should_run=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          COMMENT_BODY="${{ github.event.comment.body }}"
          
          echo "Comment body: $COMMENT_BODY"
          
          # Check if comment starts with /rc-api-review
          if [[ "$COMMENT_BODY" == "/rc-api-review"* ]]; then
            echo "‚úÖ Valid trigger comment found"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è Comment does not start with '/rc-api-review', skipping"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract PR URL from Issue Description
        id: extract
        if: github.event_name == 'issue_comment' && steps.check.outputs.should_run == 'true'
        run: |
          # Get issue details
          ISSUE_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}" | \
            jq -r '.body // ""')
          
          echo "Issue body received, extracting PR URL..."
          
          # Extract lines 3 and 4 from issue description
          LINE3=$(echo "$ISSUE_BODY" | sed -n '3p')
          LINE4=$(echo "$ISSUE_BODY" | sed -n '4p')
          
          echo "Line 3: $LINE3"
          echo "Line 4: $LINE4"
          
          # Look for GitHub PR URL in lines 3 or 4
          PR_URL=""
          
          # Check line 3 first
          if [[ "$LINE3" =~ https://github\.com/camaraproject/[^/]+/pull/[0-9]+ ]]; then
            PR_URL=$(echo "$LINE3" | grep -oE 'https://github\.com/camaraproject/[^/]+/pull/[0-9]+')
          # Then check line 4
          elif [[ "$LINE4" =~ https://github\.com/camaraproject/[^/]+/pull/[0-9]+ ]]; then
            PR_URL=$(echo "$LINE4" | grep -oE 'https://github\.com/camaraproject/[^/]+/pull/[0-9]+')
          fi
          
          if [[ -z "$PR_URL" ]]; then
            echo "‚ùå No valid CAMARA PR URL found in lines 3-4 of issue description"
            echo "Expected format: https://github.com/camaraproject/[repo]/pull/[number]"
            echo "Line 3: $LINE3"
            echo "Line 4: $LINE4"
            exit 1
          fi
          
          echo "‚úÖ Found PR URL: $PR_URL"
          
          # Set outputs with version-aware defaults
          echo "pull_request_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "review_type=release-candidate" >> $GITHUB_OUTPUT
          echo "commonalities_version=0.6" >> $GITHUB_OUTPUT
          
          echo "üìù Using defaults:"
          echo "  Review Type: release-candidate"
          echo "  Commonalities Version: 0.6 (currently supported)"
          echo "  Issue Number: ${{ github.event.issue.number }}"

      - name: Acknowledge Comment
        if: github.event_name == 'issue_comment' && steps.check.outputs.should_run == 'true'
        run: |
          # Create properly formatted acknowledgment comment using a temp file
          cat > acknowledge_comment.md << EOF
          ü§ñ **API Review Triggered**
          
          Starting automated CAMARA API review...
          
          **Details:**
          - Pull Request: ${{ steps.extract.outputs.pull_request_url }}
          - Review Type: ${{ steps.extract.outputs.review_type }}
          - Commonalities Version: ${{ steps.extract.outputs.commonalities_version }}
          
          **Version Support:**
          - ‚úÖ Commonalities 0.6: Fully supported
          - ‚è≥ Commonalities 0.7+: Coming soon
          
          Results will be posted here when the review completes.
          EOF
          
          # Post comment using the properly formatted body
          COMMENT_JSON=$(jq -n --rawfile body acknowledge_comment.md '{body: $body}')
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments" \
            -d "$COMMENT_JSON"

  validate-input:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'issue_comment' && needs.check-comment-trigger.outputs.should_run == 'true')
    needs: check-comment-trigger
    outputs:
      repo_owner: ${{ steps.parse.outputs.repo_owner }}
      repo_name: ${{ steps.parse.outputs.repo_name }}
      pr_number: ${{ steps.parse.outputs.pr_number }}
      pr_head_sha: ${{ steps.pr_details.outputs.pr_head_sha }}
      pr_head_ref: ${{ steps.pr_details.outputs.pr_head_ref }}
      pr_head_repo: ${{ steps.pr_details.outputs.pr_head_repo }}
      pr_base_ref: ${{ steps.pr_details.outputs.pr_base_ref }}
      pr_base_repo: ${{ steps.pr_details.outputs.pr_base_repo }}
      pull_request_url: ${{ steps.determine-inputs.outputs.pull_request_url }}
      issue_number: ${{ steps.determine-inputs.outputs.issue_number }}
      review_type: ${{ steps.determine-inputs.outputs.review_type }}
      commonalities_version: ${{ steps.determine-inputs.outputs.commonalities_version }}
    steps:
      - name: Determine Input Source
        id: determine-inputs
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "üìù Using manual workflow inputs"
            echo "pull_request_url=${{ github.event.inputs.pull_request_url }}" >> $GITHUB_OUTPUT
            echo "issue_number=${{ github.event.inputs.issue_number }}" >> $GITHUB_OUTPUT
            echo "review_type=${{ github.event.inputs.review_type }}" >> $GITHUB_OUTPUT
            echo "commonalities_version=${{ github.event.inputs.commonalities_version }}" >> $GITHUB_OUTPUT
          else
            echo "üìù Using comment trigger inputs"
            echo "pull_request_url=${{ needs.check-comment-trigger.outputs.pull_request_url || '' }}" >> $GITHUB_OUTPUT
            echo "issue_number=${{ needs.check-comment-trigger.outputs.issue_number || '' }}" >> $GITHUB_OUTPUT
            echo "review_type=${{ needs.check-comment-trigger.outputs.review_type || 'release-candidate' }}" >> $GITHUB_OUTPUT
            echo "commonalities_version=${{ needs.check-comment-trigger.outputs.commonalities_version || '0.6' }}" >> $GITHUB_OUTPUT
          fi
          
          echo ""
          echo "üìã Final Input Parameters:"
          echo "  Commonalities Version: ${{ steps.determine-inputs.outputs.commonalities_version }}"
          echo "  Review Type: ${{ steps.determine-inputs.outputs.review_type }}"

      - name: Validate Commonalities Version Early
        run: |
          COMMONALITIES_VERSION="${{ steps.determine-inputs.outputs.commonalities_version }}"
          
          echo "üîç Pre-validating Commonalities version: $COMMONALITIES_VERSION"
          
          case "$COMMONALITIES_VERSION" in
            "0.6")
              echo "‚úÖ Commonalities 0.6 is supported - proceeding with validation"
              ;;
            "0.7"|"0.8"|"0.9"|"1.0")
              echo "‚ö†Ô∏è Commonalities $COMMONALITIES_VERSION is not yet supported"
              echo "The workflow will handle this gracefully and provide an informative error"
              ;;
            *)
              echo "‚ùå Invalid Commonalities version: $COMMONALITIES_VERSION"
              echo "Valid options: 0.6 (supported), 0.7, 0.8, 1.0 (coming soon)"
              exit 1
              ;;
          esac

      - name: Parse PR URL
        id: parse
        run: |
          PR_URL="${{ steps.determine-inputs.outputs.pull_request_url }}"
          
          echo "üîç Parsing PR URL: $PR_URL"
          
          # Validate URL format
          if [[ ! "$PR_URL" =~ ^https://github\.com/[^/]+/[^/]+/pull/[0-9]+/?$ ]]; then
            echo "‚ùå Invalid PR URL format. Expected: https://github.com/owner/repo/pull/123"
            echo "Received: $PR_URL"
            exit 1
          fi
          
          # Extract components with improved regex
          REPO_OWNER=$(echo "$PR_URL" | sed -n 's|https://github\.com/\([^/]*\)/.*|\1|p')
          REPO_NAME=$(echo "$PR_URL" | sed -n 's|https://github\.com/[^/]*/\([^/]*\)/.*|\1|p')
          PR_NUMBER=$(echo "$PR_URL" | sed -n 's|.*/pull/\([0-9][0-9]*\).*|\1|p')
          
          # Debug output
          echo "üîç Extracted components:"
          echo "  REPO_OWNER: '$REPO_OWNER'"
          echo "  REPO_NAME: '$REPO_NAME'"
          echo "  PR_NUMBER: '$PR_NUMBER'"
          
          # Validate extracted components
          if [[ -z "$REPO_OWNER" || -z "$REPO_NAME" || -z "$PR_NUMBER" ]]; then
            echo "‚ùå Failed to extract components from PR URL: $PR_URL"
            echo "  REPO_OWNER: '$REPO_OWNER'"
            echo "  REPO_NAME: '$REPO_NAME'"  
            echo "  PR_NUMBER: '$PR_NUMBER'"
            exit 1
          fi
          
          # Additional validation for CAMARA project
          if [[ "$REPO_OWNER" != "camaraproject" ]]; then
            echo "‚ùå Repository must be from camaraproject organization"
            echo "Found: $REPO_OWNER"
            exit 1
          fi
          
          # Validate PR number is numeric
          if ! [[ "$PR_NUMBER" =~ ^[0-9]+$ ]]; then
            echo "‚ùå PR number must be numeric, found: '$PR_NUMBER'"
            exit 1
          fi
          
          echo "repo_owner=$REPO_OWNER" >> $GITHUB_OUTPUT
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Parsed PR details:"
          echo "  Repository: $REPO_OWNER/$REPO_NAME"
          echo "  PR Number: $PR_NUMBER"

      - name: Get PR Details
        id: pr_details
        run: |
          REPO_OWNER="${{ steps.parse.outputs.repo_owner }}"
          REPO_NAME="${{ steps.parse.outputs.repo_name }}"
          PR_NUMBER="${{ steps.parse.outputs.pr_number }}"
          
          echo "üîç Getting PR details for: $REPO_OWNER/$REPO_NAME#$PR_NUMBER"
          
          # Construct API URL
          API_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls/$PR_NUMBER"
          echo "üì° API URL: $API_URL"
          
          # Get PR information using GitHub API
          PR_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "$API_URL")
          
          # Check if curl was successful
          if [[ $? -ne 0 ]]; then
            echo "‚ùå Failed to fetch PR details from GitHub API"
            exit 1
          fi
          
          # Check for API errors
          if echo "$PR_RESPONSE" | jq -e '.message' > /dev/null 2>&1; then
            ERROR_MESSAGE=$(echo "$PR_RESPONSE" | jq -r '.message')
            echo "‚ùå GitHub API error: $ERROR_MESSAGE"
            exit 1
          fi
          
          # Check if PR exists and is open
          PR_STATE=$(echo "$PR_RESPONSE" | jq -r '.state // "not_found"')
          echo "üìã PR State: $PR_STATE"
          
          if [[ "$PR_STATE" != "open" ]]; then
            echo "‚ùå PR is not open or does not exist. State: $PR_STATE"
            if [[ "$PR_STATE" == "not_found" ]]; then
              echo "This usually means the PR number is incorrect or the repository is private"
            fi
            exit 1
          fi
          
          # Extract head SHA and ref (this is the PR branch we want to check out)
          PR_HEAD_SHA=$(echo "$PR_RESPONSE" | jq -r '.head.sha')
          PR_HEAD_REF=$(echo "$PR_RESPONSE" | jq -r '.head.ref')
          PR_HEAD_REPO=$(echo "$PR_RESPONSE" | jq -r '.head.repo.full_name')
          
          # Extract base info for reference (this is what the PR targets)
          PR_BASE_REF=$(echo "$PR_RESPONSE" | jq -r '.base.ref')
          PR_BASE_REPO=$(echo "$PR_RESPONSE" | jq -r '.base.repo.full_name')
          
          # Validate extracted values
          if [[ -z "$PR_HEAD_SHA" || "$PR_HEAD_SHA" == "null" ]]; then
            echo "‚ùå Failed to extract PR head SHA"
            exit 1
          fi
          
          if [[ -z "$PR_HEAD_REF" || "$PR_HEAD_REF" == "null" ]]; then
            echo "‚ùå Failed to extract PR head ref"
            exit 1
          fi
          
          echo "pr_head_sha=$PR_HEAD_SHA" >> $GITHUB_OUTPUT
          echo "pr_head_ref=$PR_HEAD_REF" >> $GITHUB_OUTPUT
          echo "pr_head_repo=$PR_HEAD_REPO" >> $GITHUB_OUTPUT
          echo "pr_base_ref=$PR_BASE_REF" >> $GITHUB_OUTPUT
          echo "pr_base_repo=$PR_BASE_REPO" >> $GITHUB_OUTPUT
          
          echo "‚úÖ PR is open and accessible"
          echo "üîç PR Details:"
          echo "  Head SHA: $PR_HEAD_SHA"
          echo "  Head Ref: $PR_HEAD_REF (this is the PR branch we'll check out)"
          echo "  Head Repo: $PR_HEAD_REPO"
          echo "  Base Ref: $PR_BASE_REF (this is what the PR targets)"  
          echo "  Base Repo: $PR_BASE_REPO"

  call-review-workflow:
    needs: validate-input
    uses: ./.github/workflows/api-review-reusable.yml
    with:
      repo_owner: ${{ needs.validate-input.outputs.repo_owner }}
      repo_name: ${{ needs.validate-input.outputs.repo_name }}
      pr_number: ${{ needs.validate-input.outputs.pr_number }}
      pr_head_sha: ${{ needs.validate-input.outputs.pr_head_sha }}
      pr_head_ref: ${{ needs.validate-input.outputs.pr_head_ref }}
      pr_head_repo: ${{ needs.validate-input.outputs.pr_head_repo }}
      pr_base_ref: ${{ needs.validate-input.outputs.pr_base_ref }}
      pr_base_repo: ${{ needs.validate-input.outputs.pr_base_repo }}
      review_type: ${{ needs.validate-input.outputs.review_type }}
      commonalities_version: ${{ needs.validate-input.outputs.commonalities_version }}
      issue_number: ${{ needs.validate-input.outputs.issue_number }}
    secrets: inherit

  post-summary:
    needs: [validate-input, call-review-workflow]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create Summary Content File
        run: |
          # Write the summary content to a file to avoid bash interpretation issues
          cat > summary_content.md << 'SUMMARY_EOF'
          ${{ needs.call-review-workflow.outputs.summary_content }}
          SUMMARY_EOF
          
          # Check if we have valid content, if not create fallback
          if [[ ! -s summary_content.md ]] || [[ $(wc -l < summary_content.md) -lt 2 ]]; then
            echo "‚ö†Ô∏è No valid summary content received, creating fallback..."
            cat > summary_content.md << 'FALLBACK_EOF'
          ‚ùå **API Review Failed**
          
          The automated review could not be completed. Please check the workflow logs for details.
          
          **Debug Information:**
          - Review Status: ${{ needs.call-review-workflow.outputs.review_status }}
          - Critical Issues: ${{ needs.call-review-workflow.outputs.critical_issues_count }}
          - Commonalities Version: ${{ needs.validate-input.outputs.commonalities_version }}
          FALLBACK_EOF
          fi
          
          echo "üìã Summary content file created:"
          wc -l summary_content.md
          echo "First few lines:"
          head -5 summary_content.md

      - name: Post Summary to Issue
        run: |
          ISSUE_NUMBER="${{ needs.validate-input.outputs.issue_number }}"
          
          echo "üìã Preparing to post summary to issue #${ISSUE_NUMBER}..."
          
          # Create comment body with trigger source indicator
          TRIGGER_INFO=""
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            TRIGGER_INFO="**Triggered by**: Comment \`/rc-api-review\` by @${{ github.event.comment.user.login }}"
          else
            TRIGGER_INFO="**Triggered by**: Manual workflow dispatch"
          fi
          
          # Create the comment header
          cat > comment_body.md << EOF
          ## ü§ñ Automated CAMARA API Review Results
          
          ${TRIGGER_INFO}
          **Pull Request**: [${{ needs.validate-input.outputs.repo_owner }}/${{ needs.validate-input.outputs.repo_name }}#${{ needs.validate-input.outputs.pr_number }}](${{ needs.validate-input.outputs.pull_request_url }})
          **Review Type**: ${{ needs.validate-input.outputs.review_type }}
          **Commonalities Version**: ${{ needs.validate-input.outputs.commonalities_version }}
          **Workflow Run**: [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          EOF
          
          # Append the summary content from the file
          cat summary_content.md >> comment_body.md
          
          # Add version-specific information if there were version issues
          if [[ "${{ needs.call-review-workflow.outputs.review_status }}" == "error" ]]; then
            cat >> comment_body.md << EOF
          
          ---
          
          **üìã Supported Versions:**
          - ‚úÖ **Commonalities 0.6**: Fully supported with \`api_review_validator_v0_6.py\`
          - üìÖ **Commonalities 0.7+**: Support planned for future releases
          
          **üîß How to fix:**
          - For current reviews: Use \`commonalities_version: 0.6\`
          - For future versions: Wait for validator script updates
          EOF
          fi
          
          # Debug: Show what we're about to post
          echo "üìã Final comment content:"
          echo "Lines: $(wc -l < comment_body.md)"
          echo "Characters: $(wc -c < comment_body.md)"
          echo ""
          echo "Preview (first 10 lines):"
          head -10 comment_body.md
          echo "..."
          
          # Post comment to issue using the properly formatted body
          if command -v jq > /dev/null; then
            COMMENT_JSON=$(jq -n --rawfile body comment_body.md '{body: $body}')
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "${{ github.api_url }}/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments" \
              -d "$COMMENT_JSON"
          else
            echo "‚ùå jq not available, using alternative method"
            # Fallback method without jq
            COMMENT_BODY=$(cat comment_body.md | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "${{ github.api_url }}/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments" \
              -d "{\"body\":\"$COMMENT_BODY\"}"
          fi
          
          echo "‚úÖ Summary posted to issue #${ISSUE_NUMBER}"
          
          # Log additional debug information
          echo "üìã Debug Summary:"
          echo "  Commonalities Version: ${{ needs.validate-input.outputs.commonalities_version }}"
          echo "  Review Status: ${{ needs.call-review-workflow.outputs.review_status }}"
          echo "  Critical Issues: ${{ needs.call-review-workflow.outputs.critical_issues_count }}"
          echo "  Comment Length: $(wc -c < comment_body.md) characters"

      - name: Handle Workflow Failure
        if: needs.call-review-workflow.result == 'failure'
        run: |
          echo "‚ùå API Review workflow failed"
          # Post failure notification
          ISSUE_NUMBER="${{ needs.validate-input.outputs.issue_number }}"
          
          TRIGGER_INFO=""
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            TRIGGER_INFO="**Triggered by**: Comment \`/rc-api-review\` by @${{ github.event.comment.user.login }}"
          else
            TRIGGER_INFO="**Triggered by**: Manual workflow dispatch"
          fi
          
          # Create properly formatted failure comment using a temp file
          cat > failure_comment.md << EOF
          ## ‚ùå API Review Failed
          
          The automated API review encountered a workflow error and could not complete.
          
          ${TRIGGER_INFO}
          **Pull Request**: ${{ needs.validate-input.outputs.pull_request_url }}
          **Commonalities Version**: ${{ needs.validate-input.outputs.commonalities_version }}
          **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          **Error Details:**
          - Reusable workflow failed to execute
          - Check the workflow logs for detailed error information
          - This may be due to version compatibility, missing scripts, or GitHub Actions issues
          
          **Troubleshooting:**
          1. Verify Commonalities version is supported (currently: 0.6)
          2. Check that \`api_review_validator_v0_6.py\` exists in workflow repository
          3. Review workflow logs for specific error messages
          
          Please check the workflow logs and retry the review.
          EOF
          
          # Post comment using the properly formatted body
          COMMENT_JSON=$(jq -n --rawfile body failure_comment.md '{body: $body}')
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments" \
            -d "$COMMENT_JSON"
          
          echo "‚úÖ Failure notification posted to issue #${ISSUE_NUMBER}"