# .github/workflows/api-review-reusable.yml
# 
# CAMARA API Review - Reusable Workflow
# 
# Purpose: Performs automated validation of CAMARA API definitions against compliance checklist.
#   - Checks out target repository PR branch
#   - Finds API YAML files in /code/API_definitions/  
#   - Runs comprehensive automated validation checks
#   - Generates detailed reports and issue summaries
# 
# Called by: api-review-trigger.yml workflow
# 
# Usage Guide: /documentation/SupportingDocuments/CAMARA_API_Review_Workflow_Usage_Guide.md
# Place this file in: ReleaseManagement repository .github/workflows/ directory

name: 'CAMARA API Review - Reusable'

on:
  workflow_call:
    inputs:
      repo_owner:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      pr_number:
        required: true
        type: string
      pr_head_sha:
        required: true
        type: string
      pr_head_ref:
        required: true
        type: string
      review_type:
        required: true
        type: string
      commonalities_version:
        required: true
        type: string
      issue_number:
        required: true
        type: string

jobs:
  api-review:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Review Environment
        run: |
          echo "🚀 Starting CAMARA API Review"
          echo "Repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}"
          echo "PR: #${{ inputs.pr_number }}"
          echo "Head SHA: ${{ inputs.pr_head_sha }}"
          echo "Review Type: ${{ inputs.review_type }}"
          echo "Expected Commonalities: ${{ inputs.commonalities_version }}"
          echo "Workflow Repository: ${{ github.repository }}"

      - name: Checkout Workflow Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          path: review-tools

      - name: Checkout Target Repository PR
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo_owner }}/${{ inputs.repo_name }}
          ref: ${{ inputs.pr_head_sha }}
          path: target-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install pyyaml jsonschema openapi-spec-validator requests

      - name: Locate API Validator Script
        run: |
          echo "🔍 Looking for API validator script..."
          echo "Workflow repository: ${{ github.repository }}"
          echo "Expected script location: review-tools/scripts/api_review_validator.py"
          
          # Check if the script exists in the checked-out workflow repository
          if [[ -f "review-tools/scripts/api_review_validator.py" ]]; then
            echo "✅ Found validator script in workflow repository"
            cp review-tools/scripts/api_review_validator.py ./
          else
            echo "❌ API Validator script not found!"
            echo ""
            echo "Expected location: review-tools/scripts/api_review_validator.py"
            echo "Workflow repository: ${{ github.repository }}"
            echo ""
            echo "📁 Checking directory structure:"
            if [[ -d "review-tools" ]]; then
              echo "review-tools directory contents:"
              find review-tools -type f -name "*.py" | head -10 || echo "No Python files found"
              echo ""
              echo "review-tools/scripts directory contents:"
              ls -la review-tools/scripts/ 2>/dev/null || echo "scripts directory not found"
            else
              echo "review-tools directory does not exist"
            fi
            echo ""
            echo "Please ensure the api_review_validator.py script exists at:"
            echo "  ${{ github.repository }}/scripts/api_review_validator.py"
            exit 1
          fi
          
          # Make script executable
          chmod +x api_review_validator.py
          
          # Verify the script is working
          echo "🧪 Testing validator script..."
          if python api_review_validator.py 2>&1 | grep -q "Usage:" || [[ $? -eq 1 ]]; then
            echo "✅ Validator script is accessible"
          else
            echo "⚠️ Validator script may have issues, but continuing..."
          fi

      - name: Run API Review
        id: review
        run: |
          echo "🔍 Searching for API definition files..."
          
          # Create output directory
          mkdir -p ./review-output
          
          # Debug: Check target repository structure
          echo "📁 Target repository structure:"
          find target-repo -type f -name "*.yaml" -o -name "*.yml" | head -10 || echo "No YAML files found"
          
          # Run the validation - script now always exits with code 0
          echo "🚀 Starting validation..."
          python api_review_validator.py "./target-repo" "${{ inputs.commonalities_version }}" "./review-output"
          
          echo "📊 Validation analysis completed"
          
          # Check if reports were generated
          if [[ -f "./review-output/summary.md" ]]; then
            echo "✅ Summary report generated"
            
            # Parse the summary to determine if there are critical issues
            if grep -q "🔴 Critical: 0" "./review-output/summary.md"; then
              echo "review_status=success" >> $GITHUB_OUTPUT
              echo "critical_issues=0" >> $GITHUB_OUTPUT
              echo "✅ No critical issues found - ready for release"
            else
              # Extract critical issue count
              CRITICAL_COUNT=$(grep -o "🔴 Critical: [0-9]*" "./review-output/summary.md" | grep -o "[0-9]*" || echo "unknown")
              echo "review_status=has_critical_issues" >> $GITHUB_OUTPUT
              echo "critical_issues=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
              echo "⚠️ Found $CRITICAL_COUNT critical issue(s) - requires attention before release"
            fi
          else
            echo "review_status=error" >> $GITHUB_OUTPUT
            echo "critical_issues=unknown" >> $GITHUB_OUTPUT
            echo "❌ No summary report generated - validation may have failed"
          fi

      - name: Upload Detailed Report
        uses: actions/upload-artifact@v4
        if: always()  # Always upload, even if validation found issues
        with:
          name: api-review-detailed-report
          path: ./review-output/detailed-report.md
          retention-days: 30

      - name: Upload Summary for Comment
        uses: actions/upload-artifact@v4
        if: always()  # Always upload, even if validation found issues
        with:
          name: api-review-summary
          path: ./review-output/summary.md
          retention-days: 7

      - name: Display Review Summary
        if: always()  # Always display summary, even if validation found issues
        run: |
          echo "## 📋 API Review Summary"
          if [ -f "./review-output/summary.md" ]; then
            cat ./review-output/summary.md
          else
            echo "❌ Summary file not generated"
            echo "This usually indicates an error in the validation script"
          fi

      - name: Fail on Critical Issues
        if: always() && steps.review.outputs.validation_exit_code != '0'
        run: |
          EXIT_CODE="${{ steps.review.outputs.validation_exit_code }}"
          echo "🎯 API Review Results:"
          echo "   Exit Code: $EXIT_CODE"
          
          if [ "$EXIT_CODE" = "0" ]; then
            echo "✅ No critical issues found - ready for release!"
          else
            echo "❌ Critical issues found that must be addressed before release"
            echo "📄 Please download the detailed report and review all findings"
            echo "🔄 After fixing issues, re-run the review workflow"
            echo ""
            echo "This workflow failure is intentional to prevent release with critical issues."
            exit 1
          fi